From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: stanvonderhtlwienwestlol <dusek.s03@htlwienwest.at>
Date: Sun, 19 Dec 2021 22:42:48 +0100
Subject: [PATCH] Add Atlas Config


diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index 34bc24403a83ae578d2fc3956b4883894c618747..1e24ecf874f175a7759d7d1f125a0c612bea68fc 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -674,8 +674,10 @@ public class PaperCommand extends Command {
 
         MinecraftServer console = MinecraftServer.getServer();
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings"));
+        net.atlaspvp.AtlasConfig.init((File) console.options.valueOf("atlas-settings"));
         for (ServerLevel world : console.getAllLevels()) {
             world.paperConfig.init();
+            world.atlasConfig.init();
         }
         console.server.reloadCount++;
 
diff --git a/src/main/java/net/atlaspvp/AtlasConfig.java b/src/main/java/net/atlaspvp/AtlasConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..df3cf17ba7e206c399b5bc6199608ba54376f1f0
--- /dev/null
+++ b/src/main/java/net/atlaspvp/AtlasConfig.java
@@ -0,0 +1,200 @@
+package net.atlaspvp;
+
+import com.destroystokyo.paper.MSPTCommand;
+import com.destroystokyo.paper.Metrics;
+import com.destroystokyo.paper.PaperCommand;
+import com.destroystokyo.paper.PaperConfig;
+import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
+import com.google.common.base.Strings;
+import com.google.common.base.Throwables;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+import com.google.common.collect.Lists;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import co.aikar.timings.Timings;
+import co.aikar.timings.TimingsManager;
+import org.spigotmc.SpigotConfig;
+import org.spigotmc.WatchdogThread;
+
+public class AtlasConfig {
+    private static File CONFIG_FILE;
+    private static final String HEADER = "Change AtlasSpigot settings here:\n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    private static boolean verbose;
+    private static boolean fatalError;
+    /*========================================================================*/
+    private static boolean metricsStarted;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load atlas.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+        readConfig(AtlasConfig.class, null);
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void fatal(String s) {
+        fatalError = true;
+        throw new RuntimeException("Fatal atlas.yml config error: " + s);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Atlas", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+        saveConfig();
+    }
+
+    static void saveConfig() {
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd': num *= (double) 60*60*24; break;
+            case 'h': num *= (double) 60*60; break;
+            case 'm': num *= (double) 60; break;
+            default: case 's': break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+
+    //config options here
+    public static boolean mergeEntities;
+    private static void mergeEntities() {
+        mergeEntities = getBoolean("settings.cannons.merge-entities", true);
+    }
+
+    public static boolean skipBlockDamageIfWatered;
+    private static void skipBlockDamageIfWatered() {
+        skipBlockDamageIfWatered = getBoolean("settings.cannons.skip-block-damage-if-watered", true);
+    }
+}
diff --git a/src/main/java/net/atlaspvp/AtlasWorldConfig.java b/src/main/java/net/atlaspvp/AtlasWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..23fb898b9d0136f27dc3229599b309b44fecb3f2
--- /dev/null
+++ b/src/main/java/net/atlaspvp/AtlasWorldConfig.java
@@ -0,0 +1,47 @@
+package net.atlaspvp;
+
+import java.util.Arrays;
+import java.util.List;
+
+import net.atlaspvp.AtlasConfig;
+import it.unimi.dsi.fastutil.objects.Reference2IntMap;
+import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
+import net.minecraft.world.entity.MobCategory;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.Table;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.monster.Vindicator;
+import net.minecraft.world.entity.monster.Zombie;
+import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray.EngineMode;
+import net.minecraft.world.level.NaturalSpawner;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotWorldConfig;
+
+public class AtlasWorldConfig {
+
+    private final String worldName;
+    private final SpigotWorldConfig spigotConfig;
+    private YamlConfiguration config;
+    private boolean verbose;
+
+    public AtlasWorldConfig(String worldName, SpigotWorldConfig spigotConfig) {
+        this.worldName = worldName;
+        this.spigotConfig = spigotConfig;
+        this.config = AtlasConfig.config;
+        init();
+    }
+
+    public void init() {
+        this.config = AtlasConfig.config; // grab updated reference
+        AtlasConfig.readConfig(net.atlaspvp.AtlasWorldConfig.class, this);
+    }
+}
+
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b6ee0e709b0f0529b99567bc9b8fb6bfd99bcd8e..8a22427162058961764b1b41fb9da2a452362fb8 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -224,6 +224,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper start
         try {
             com.destroystokyo.paper.PaperConfig.init((java.io.File) options.valueOf("paper-settings"));
+            net.atlaspvp.AtlasConfig.init((java.io.File) options.valueOf("atlas-settings"));
         } catch (Exception e) {
             DedicatedServer.LOGGER.error("Unable to load server configuration", e);
             return false;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 5259e7c0f71005ef6af9f10afdabbd0b3269ae66..210afc24114db812d343674c2ccad34149de1630 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -34,6 +34,8 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+
+import net.atlaspvp.AtlasConfig;
 import net.minecraft.CrashReport;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.DefaultedRegistry;
@@ -754,18 +756,19 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
 
             //jesus modification - add stacking of tnt
-            final Entity[] prev = {null};
-            this.entityTickList.forEach(entity -> {
-                if (prev[0] instanceof PrimedTnt && entity instanceof PrimedTnt && prev[0].equals(entity)) {
-                    ((PrimedTnt) entity).count+= ((PrimedTnt) prev[0]).count;
-                    prev[0].discard();
-                }
-                else if (prev[0] instanceof FallingBlockEntity && entity instanceof FallingBlockEntity && prev[0].equals(entity)) {
-                    ((FallingBlockEntity) entity).count+= ((FallingBlockEntity) prev[0]).count;
-                    prev[0].discard();
-                }
-                prev[0] = entity;
-            });
+            if (AtlasConfig.mergeEntities == true) {
+                final Entity[] prev = {null};
+                this.entityTickList.forEach(entity -> {
+                    if (prev[0] instanceof PrimedTnt && entity instanceof PrimedTnt && prev[0].equals(entity)) {
+                        ((PrimedTnt) entity).count += ((PrimedTnt) prev[0]).count;
+                        prev[0].discard();
+                    } else if (prev[0] instanceof FallingBlockEntity && entity instanceof FallingBlockEntity && prev[0].equals(entity)) {
+                        ((FallingBlockEntity) entity).count += ((FallingBlockEntity) prev[0]).count;
+                        prev[0].discard();
+                    }
+                    prev[0] = entity;
+                });
+            }
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
             timings.entityTick.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index b68d90028ebcb6820ebeb96e1fb6f65d7f345845..1a845a21966eca29293d8a2a265478e73b120d5d 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -14,6 +14,8 @@ import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import net.atlaspvp.AtlasConfig;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Vec3i;
@@ -160,7 +162,7 @@ public class Explosion {
         BlockPos blockpositionTNT = new BlockPos(this.x, this.y, this.z);
         BlockState iblockdataTNT = this.level.getBlockState(blockpositionTNT);
         Boolean inWater=false;
-        if (iblockdataTNT.getMaterial().isLiquid()) { //Herm, adding a influid check and canceling logic when in fluid during explosion.
+        if (iblockdataTNT.getMaterial().isLiquid() && AtlasConfig.skipBlockDamageIfWatered == true) { //Herm, adding a influid check and canceling logic when in fluid during explosion - jesus also adding check for config here
             inWater=true;
         }
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 9cafd000b3533ed9fd35df2ec880f55e262084fb..3a0238e4edaf989391a1f015f1dbf89c125973b1 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -168,6 +168,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
 
+    public final net.atlaspvp.AtlasWorldConfig atlasConfig; //Atlas
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -314,6 +316,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, final DimensionType dimensionmanager, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.concurrent.Executor executor) { // Paper - Anti-Xray - Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
+        this.atlasConfig = new net.atlaspvp.AtlasWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Atlas
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
         this.ticksPerAnimalSpawns = this.getCraftServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 88c0862670baf7f9b78b134e4dd7b9be813a2e55..45a162076b4a26f5c721a60fb7e64ec5fed009aa 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -924,6 +924,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        net.atlaspvp.AtlasConfig.init((File) console.options.valueOf("atlas-settings")); // Paper
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -964,6 +965,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.atlasConfig.init(); // Paper
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 22e9dd17f62103c5061435099ce96a3d70d54808..f1397fc0fffc9d0f5a733304621b8f8a97844db9 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -147,6 +147,12 @@ public class Main {
                         .describedAs("Yml file");
                 // Paper end
 
+                acceptsAll(asList("atlas", "atlas-settings"), "File for atlas settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("atlas.yml"))
+                    .describedAs("Yml file");
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
